import telebot
import os
import logging
import json

import mytoken
from extensions import DataBase

TOKEN = mytoken.TOKEN

bot = telebot.TeleBot(TOKEN)

db = DataBase()


@bot.message_handler(commands=["start"])
def start(message):
    user = db.get_user(message.chat.id)
    if user["chat_id"]:
        text = (f"‚úåÔ∏è–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, {message.chat.first_name}‚úåÔ∏è.\n\nüêòüêØüêª\n–Ø - –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞! "
                f"–£ –º–µ–Ω—è –¥–ª—è –í–∞—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–π, —Ç—ã —É–∑–Ω–∞–µ—à—å —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ. \n\n"
                f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!\n\n"
                f"–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∫–æ–º–º–∞–Ω–¥–µ: /menu\nüêòüêØüêª")
        markup = telebot.types.InlineKeyboardMarkup()
        butt_1 = telebot.types.InlineKeyboardButton("‚≠ê –ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ‚≠ê", callback_data="quiz")
        markup.add(butt_1)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –ø—Ä–∏–∫—Ä–µ–ø. —Ç–µ–∫—Å—Ç.
        bot.send_photo(message.chat.id, open("pictures/logozoo.png", 'rb'), caption=text, reply_markup=markup)


@bot.message_handler(commands=["menu"])
def show_menu(message):
    user = db.get_user(message.chat.id)
    if user["chat_id"]:
        bot.delete_message(message.chat.id, message.message_id - 1)
        text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:"
        markup = telebot.types.InlineKeyboardMarkup(row_width=2)
        quizz = telebot.types.InlineKeyboardButton("‚≠ê –ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ‚≠ê", callback_data="quiz")
        revi = telebot.types.InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí¨", callback_data="review")
        contact = telebot.types.InlineKeyboardButton("‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è", callback_data="contact")
        reset = telebot.types.InlineKeyboardButton("üîÅ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üîÅ", callback_data="resets")
        guardian = telebot.types.InlineKeyboardButton("–°—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º",
                                                      url="https://moscowzoo.ru/my-zoo/become-a-guardian/")
        markup.add(quizz, revi, contact, reset, guardian)
        bot.send_message(message.chat.id, text, reply_markup=markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.
@bot.callback_query_handler(func=lambda query: query.data == "quiz")
def start_passing(query):
    user = db.get_user(query.message.chat.id)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª —ç—Ç—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.
    if user["is_passed"]:
        bot.send_message(query.message.chat.id, "–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∏–∏–∫—Ç–æ—Ä–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë?! üòâ")
        db.set_user(user["chat_id"], {"is_passed": False, "is_passing": False, "question_index": None,
                                      "answers": []})

    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ, –¥–∞—ë–º –µ–º—É –µ—ë –ø—Ä–æ–π—Ç–∏.
    if user["is_passing"]:
        return

    db.set_user(query.message.chat.id, {"question_index": 0, "is_passing": True})
    user = db.get_user(query.message.chat.id)
    post = get_question_message(user)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
    if post is not None:
        bot.send_message(query.message.chat.id, post["text"], reply_markup=post["keyboard"])


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–≤–µ—Ç—ã.
@bot.callback_query_handler(func=lambda query: query.data.startswith("?ans"))
def answered(query):
    user = db.get_user(query.message.chat.id)
    if user["is_passed"] or not user["is_passing"]:
        return
    answer_index = int(query.data.split("&")[1])
    user["answers"].append(answer_index)
    db.set_user(query.message.chat.id, {"answers": user["answers"]})
    post = get_answered_message(user)
    if post is not None:
        bot.edit_message_text(post["text"], query.message.chat.id, query.message.id, reply_markup=post["keyboard"])


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥. –≤–æ–ø—Ä–æ—Å.
@bot.callback_query_handler(func=lambda query: query.data == "?next")
def next_question(query):
    user = db.get_user(query.message.chat.id)
    if user["is_passed"] or not user["is_passing"]:
        return
    user["question_index"] += 1
    db.set_user(query.message.chat.id, {"question_index": user["question_index"]})
    post = get_question_message(user)
    if post is not None:
        bot.edit_message_text(post["text"], query.message.chat.id, query.message.id, reply_markup=post["keyboard"])


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.
@bot.callback_query_handler(func=lambda query: query.data == "review")
def send_comment(query):
    bot.send_message(query.message.chat.id, f"‚úåÔ∏è–ü—Ä–∏–≤–µ—Ç! {query.message.chat.first_name}‚úåÔ∏è\n\n"
                                            f"–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, "
                                            f"—á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º, "
                                            f"—Ç–æ –≤—ã—Ä–∞–∂–∞—é –æ–≥—Ä–æ–º–Ω—É—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!\n"
                                            f"–¢–≤–æ–π –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ!")
    bot.register_next_step_handler(query.message, save_reviews)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö.
@bot.callback_query_handler(func=lambda query: query.data == "resets")
def reset_user(query):
    text = "‚ùó –£—á—Ç–∏—Ç–µ, —á—Ç–æ —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω—É–ª–∏—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã! ‚ùó\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
    markup = telebot.types.InlineKeyboardMarkup()
    yes = telebot.types.InlineKeyboardButton("‚úÖ –î–∞ ‚úÖ", callback_data="yes")
    no = telebot.types.InlineKeyboardButton("‚ùå –ù–µ—Ç‚ùå ", callback_data="no")
    markup.add(yes, no)
    bot.send_message(query.message.chat.id, text, reply_markup=markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ö–æ–Ω—Ç–∞–∫—Ç—ã.
@bot.callback_query_handler(func=lambda query: query.data == "contact")
def contacts(query):
    user = db.get_user(query.message.chat.id)
    if user["chat_id"]:
        text = "–ú—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:\n\nTelegram: @Moscowzoo_official\nVK: vk.com/moscow_zoo\n"\
               "OK: ok.ru/moscowzoo\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é: /menu"
        markup = telebot.types.InlineKeyboardMarkup()
        html = telebot.types.InlineKeyboardButton("–ù–∞—à —Å–∞–π—Ç", url="https://moscowzoo.ru/")
        markup.add(html)
        bot.send_message(query.message.chat.id, text, reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ü–∞ –∏ —Å–ª–µ–¥. –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.
def get_question_message(user):
    if user["question_index"] == db.questions_count:
        animal_counts = db.load_comparison()
        animal_data = db.load_condition()
        question_data = json.load(open("questions.json", encoding="utf-8"))

        for question_index, answer_index in enumerate(user["answers"]):
            animal_id = question_data[question_index]["answers"][answer_index]["id"]
            animal_counts[animal_id] += 1

        max_animal = max(animal_counts, key=animal_counts.get)
        animal_info = animal_data.get(max_animal)
        if animal_info:
            animal = animal_info[0]
            filename = animal_info[1]
            text = (f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!!!"
                    f"–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {animal}\n\n–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é: /menu")

            db.set_user(user["chat_id"], {"is_passed": True, "is_passing": False})

            markup = telebot.types.InlineKeyboardMarkup()
            butt_1 = telebot.types.InlineKeyboardButton("‚Ü™ –ü–æ–≤—Ç–æ—Ä–∏–º? ‚Ü©", callback_data="quiz")
            markup.add(butt_1)
            bot.send_photo(user["chat_id"], open(filename, 'rb'), caption=text, reply_markup=markup)

            bot.send_message(user["chat_id"], "–¢–µ–ø–µ—Ä—å –Ω–µ–º–Ω–æ–≥–æ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏. –ø—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–í–æ–∑—å–º–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ "
                                              "–ø–æ–¥ –æ–ø–µ–∫—É¬ª ‚Äî —ç—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –≤–∫–ª–∞–¥ –≤ –¥–µ–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è "
                                              "–ó–µ–º–ª–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—à–µ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞. –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ "
                                              "—Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç—Ç–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è "
                                              "–Ω–∞—à–µ–π –ø–ª–∞–Ω–µ—Ç—ã. –ö–æ–≥–¥–∞ –≤—ã –±–µ—Ä–µ—Ç–µ –ø–æ–¥ –æ–ø–µ–∫—É –∂–∏–≤–æ—Ç–Ω–æ–µ, –≤—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ –Ω–∞–º –≤ "
                                              "—ç—Ç–æ–º –±–ª–∞–≥–æ—Ä–æ–¥–Ω–æ–º –¥–µ–ª–µ. –ß—Ç–æ–±—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π, "
                                              "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ - "
                                              "https://moscowzoo.ru/my-zoo/become-a-guardian/"
                                              "\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é: /menu")

            result = f"ID: {user['chat_id']}. –ü—Ä–æ—à–µ–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. –¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {animal}"
            bot.send_message(chat_id=os.getenv("SUPPORT_CHAT_ID"), text=result)

    question = db.get_question(user["question_index"])
    if question is None:
        return
    keyboard = telebot.types.InlineKeyboardMarkup()
    for answer_index, answer in enumerate(question["answers"]):
        keyboard.row(telebot.types.InlineKeyboardButton(f"{chr(answer_index + 97)}) {answer['text']}",
                                                        callback_data=f"?ans&{answer_index}"))
    text = f"üîπ –í–æ–ø—Ä–æ—Å ‚Ññ{user['question_index'] + 1} üîπ\n\n{question['text']}"
    return {
        "text": text,
        "keyboard": keyboard
    }


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤.
def get_answered_message(user):
    question = db.get_question(user["question_index"])
    text = f"üîπ –í–æ–ø—Ä–æ—Å ‚Ññ{user['question_index'] + 1} üîπ\n\n{question['text']}\n"
    for answer_index, answer in enumerate(question["answers"]):
        text += f"{chr(answer_index + 97)}) {answer['text']}"
        if answer_index == user["answers"]:
            text += " ‚ùå"
        elif answer_index == user["answers"][-1]:
            text += " ‚úÖ"
        text += "\n"
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(telebot.types.InlineKeyboardButton("‚ñ∂ –î–∞–ª–µ–µ ‚ñ∂", callback_data="?next"))
    return {
        "text": text,
        "keyboard": keyboard
    }


@bot.callback_query_handler(func=lambda query: query.data == "yes" or query.data == "no")
def input_yes(query):
    if query.data == "yes":
        user = db.get_user(query.message.chat.id)
        db.set_user(user["chat_id"], {"is_passed": False, "is_passing": False, "question_index": 0,
                                      "answers": []})
        bot.send_message(query.message.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã! ‚úÖ\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é: /menu")
    elif query.data == "no":
        bot.send_message(query.message.chat.id, "‚ùå –ú–Ω–µ –±—ã –í–∞—à—É —Ä–µ—à–∏–º–æ—Å—Ç—å! ‚ùå\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é: /menu")


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.
def save_reviews(message):
    text = message.text
    user = message.from_user.username
    forbidden_chars = ["!", "@", "#", "$", "%"]         # –°–∏–º–≤–æ–ª—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç.
    if not text:
        bot.reply_to(message, "‚ùó –û—à–∏–±–∫–∞! –í –ø–æ–ª–µ –æ—Ç–∑—ã–≤–∞ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ ‚ùó")
        return
    elif len(text) > 500:
        bot.reply_to(message, "‚ùó –û—à–∏–±–∫–∞! –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤! –¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùó")
        return
    elif text.startswith(tuple(forbidden_chars)):
        bot.reply_to(message, "‚ùó –û—à–∏–±–∫–∞! –ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–æ–≤! ‚ùó")
        return
    else:
        bot.delete_message(message.chat.id, message.message_id - 1)
        with open("reviews.txt", "a+", encoding="utf-8") as file:
            file.write(f"–û—Ç–∑—ã–≤ –æ—Ç {user}:\n{text}\n\n")
        bot.reply_to(message, "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üôè\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é: /menu")


if __name__ == "__main__":
    # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        handlers=[logging.FileHandler(filename="logs.txt", encoding='utf-8', mode='a+')],
        format="%(asctime)s %(name)s : %(levelname)s : %(message)s", datefmt="%F %A %T", level=logging.DEBUG)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.
    try:
        bot.polling(none_stop=True)
        logging.debug("–†–∞–±–æ—Ç–∞–µ—Ç!")
    except Exception as e:
        logging.error(f"–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–∏—á–∏–Ω–∞: {e}")
        raise e
